import { CustomerApiKey } from '../models/customerApiKey'
import { CustomerApiKeyEncryption } from '../utils/customerApiKeyEncryption'
import { PutCommand, type DynamoDBDocumentClient } from '@aws-sdk/lib-dynamodb'
import {
  CreateUsagePlanKeyCommand,
  CreateUsagePlanCommand,
  CreateApiKeyCommand,
  GetUsagePlansCommand,
  type APIGatewayClient,
  type CreateUsagePlanKeyRequest,
  type CreateApiKeyCommandInput,
  type GetUsagePlansCommandInput,
  type CreateUsagePlanCommandInput,
  type UsagePlan
} from '@aws-sdk/client-api-gateway'

import crypto from 'crypto'

const TableName = process.env.CUSTOMER_API_KEYS_TABLE_NAME ?? ''

class CreateCustomerApiKey {
  static CLIENT_ID_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
  static CLIENT_ID_LENGTH = 17
  static CLIENT_ID_PREFIX = 'HUB'
  static SECRET_LENGTH = 32
  static API_KEY_TYPE = 'API_KEY'
  static PLAN_LIST_LIMIT = parseInt(process.env.USAGE_PLAN_LIST_PAGINATION_LIMIT ?? '100')

  constructor (
    private readonly dynamodbClient: DynamoDBDocumentClient,
    private readonly apiGatewayClient: APIGatewayClient
  ) {}

  async call (organisationId: string, description: string): Promise<CustomerApiKey> {
    const customerApiKey = new CustomerApiKey()

    customerApiKey.OrganisationId = organisationId
    customerApiKey.CustomerApiKeyId = this.generateClientId()
    customerApiKey.Secret = await this.generateRandomSecret()
    customerApiKey.Enabled = true
    customerApiKey.Description = description ?? `Autogenerated on ${new Date().toISOString()}`
    customerApiKey.UsagePlanId = process.env.USAGE_PLAN_ID ?? 'unknown'

    await this.createInApiGateway(customerApiKey)
    await this.createInDynamoDb(customerApiKey)
    await this.associateToUsagePlan(customerApiKey)

    return customerApiKey
  }

  private async createInDynamoDb (customerApiKey: CustomerApiKey): Promise<void> {
    const command = new PutCommand({
      TableName,
      Item: customerApiKey.toItem()
    })

    const response = await this.dynamodbClient.send(command)

    if (response.$metadata.httpStatusCode === 201) {
      customerApiKey.Saved = true
    }
  }

  private async createInApiGateway (customerApiKey: CustomerApiKey): Promise<void> {
    const input: CreateApiKeyCommandInput = await customerApiKey.toApiGatewayItem()
    const command = new CreateApiKeyCommand(input)

    const response = await this.apiGatewayClient.send(command)

    customerApiKey.ApiGatewayId = response.id ?? 'unknown'
  }

  private async associateToUsagePlan (customerApiKey: CustomerApiKey): Promise<void> {
    await this.findOrCreateUsagePlan(customerApiKey)

    const input: CreateUsagePlanKeyRequest = {
      keyId: customerApiKey.ApiGatewayId,
      usagePlanId: customerApiKey.UsagePlanId,
      keyType: CreateCustomerApiKey.API_KEY_TYPE
    }

    const command = new CreateUsagePlanKeyCommand(input)

    await this.apiGatewayClient.send(command)
  }

  private async findOrCreateUsagePlan (customerApiKey: CustomerApiKey): Promise<void> {
    let usagePlanId = await this.findUsagePlan(customerApiKey)

    if (usagePlanId === null) { usagePlanId = await this.createUsagePlan(customerApiKey) }

    customerApiKey.UsagePlanId = usagePlanId
  }

  private async findUsagePlan (customerApiKey: CustomerApiKey): Promise<string | null> {
    const usagePlans = await this.getUsagePlans()

    const usagePlan = usagePlans.find((plan) => plan.name === customerApiKey.OrganisationId)

    return usagePlan?.id ?? null
  }

  private async getUsagePlans (): Promise<UsagePlan[]> {
    const usagePlans: UsagePlan[] = []
    const limit = CreateCustomerApiKey.PLAN_LIST_LIMIT
    let position = '1'

    while (position !== null) {
      const input: GetUsagePlansCommandInput = { limit, position }

      const command = new GetUsagePlansCommand(input)

      const response = await this.apiGatewayClient.send(command)

      const items = response.items ?? []

      position = response.position ?? ''

      if (items.length === 0) { break }

      usagePlans.push(...items)

      if (position === '') { break }

      position = (parseInt(position) + 1).toString()
    }

    return usagePlans
  }

  private async createUsagePlan (customerApiKey: CustomerApiKey): Promise<string> {
    const input: CreateUsagePlanCommandInput = {
      name: customerApiKey.OrganisationId
    }

    const command = new CreateUsagePlanCommand(input)

    const response = await this.apiGatewayClient.send(command)

    const planId = response.id ?? 'unknown'

    if (planId === 'unknown') {
      throw new Error('Failed to create usage plan')
    }

    return planId
  }

  private generateClientId (): string {
    let clientId = CreateCustomerApiKey.CLIENT_ID_PREFIX

    for (let i = 0; i < CreateCustomerApiKey.CLIENT_ID_LENGTH; i++) {
      const randomIndex = Math.floor(Math.random() * CreateCustomerApiKey.CLIENT_ID_CHARS.length)

      clientId += CreateCustomerApiKey.CLIENT_ID_CHARS[randomIndex]
    }

    return clientId
  }

  private async generateRandomSecret (): Promise<string> {
    const randomSecret: string = crypto.randomBytes(CreateCustomerApiKey.SECRET_LENGTH).toString('base64')
    const encrypted = await new CustomerApiKeyEncryption().encrypt(randomSecret)

    return encrypted
  }
}

export { CreateCustomerApiKey }
