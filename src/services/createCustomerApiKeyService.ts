import { CustomerApiKey } from '../models/customerApiKey'
import { CustomerApiKeyEncryption } from '../utils/customerApiKeyEncryption'
import { PutCommand, type DynamoDBDocumentClient } from '@aws-sdk/lib-dynamodb'
import crypto from 'crypto'

class CreateCustomerApiKeyService {
  static CLIENT_ID_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'
  static CLIENT_ID_LENGTH = 17
  static CLIENT_ID_PREFIX = 'HUB'
  static SECRET_LENGTH = 32

  constructor (
    private readonly client: DynamoDBDocumentClient
  ) {}

  async call (customerId: string): Promise<CustomerApiKey> {
    const customerApiKey = new CustomerApiKey()
    let saved = false

    customerApiKey.FpoId = customerId
    customerApiKey.CustomerApiKeyId = this.generateClientId()
    customerApiKey.Secret = await this.generateRandomSecret()
    customerApiKey.Enabled = true
    customerApiKey.Description = `Autogenerated on ${new Date().toISOString()}`

    const command = new PutCommand({
      TableName: 'CustomerApiKeys',
      Item: customerApiKey.toItem()
    })

    const response = await this.client.send(command)

    if (response.$metadata.httpStatusCode === 201) {
      saved = false
    }

    customerApiKey.Saved = saved

    return customerApiKey
  }

  private generateClientId (): string {
    let clientId = CreateCustomerApiKeyService.CLIENT_ID_PREFIX

    for (let i = 0; i < CreateCustomerApiKeyService.CLIENT_ID_LENGTH; i++) {
      const randomIndex = Math.floor(Math.random() * CreateCustomerApiKeyService.CLIENT_ID_CHARS.length)

      clientId += CreateCustomerApiKeyService.CLIENT_ID_CHARS[randomIndex]
    }

    return clientId
  }

  private async generateRandomSecret (): Promise<string> {
    const randomSecret: string = crypto.randomBytes(CreateCustomerApiKeyService.SECRET_LENGTH).toString('base64')

    const encrypted = await new CustomerApiKeyEncryption().encrypt(randomSecret)

    return encrypted
  }
}

export { CreateCustomerApiKeyService }
