import 'jasmine'
import { type DynamoDBClient } from '@aws-sdk/client-dynamodb'
import { CreateApiKeyCommand, CreateUsagePlanKeyCommand, type APIGatewayClient } from '@aws-sdk/client-api-gateway'
import { CreateCustomerApiKey } from '../../src/operations/createCustomerApiKey'

describe('CreateCustomerApiKey', () => {
  let dynamodbClient: jasmine.SpyObj<DynamoDBClient>
  let apigatewayClient: jasmine.SpyObj<APIGatewayClient>
  let createCustomerApiKey: CreateCustomerApiKey

  beforeEach(() => {
    const dynamodbResult = {
      $metadata: {
        httpStatusCode: 201
      }
    }

    dynamodbClient = jasmine.createSpyObj('DynamoDBClient', { send: Promise.resolve(dynamodbResult) })
    apigatewayClient = jasmine.createSpyObj('APIGatewayClient', ['send'])
    const sendSpy = jasmine.createSpy('send').and.callFake(async (command) => {
      if (command instanceof CreateApiKeyCommand) {
        return await Promise.resolve({ id: 'apiGatewayId' })
      } else if (command instanceof CreateUsagePlanKeyCommand) {
        return await Promise.resolve({ id: 'usagePlanId' })
      } else {
        throw new Error(`Unknown command type: ${command}`)
      }
    })

    apigatewayClient.send = sendSpy
    createCustomerApiKey = new CreateCustomerApiKey(dynamodbClient, apigatewayClient)
  })

  it('generates a fresh api key', async () => {
    const created = await createCustomerApiKey.call('fpoId')
    const decrypted = await created.toDecryptedJson()

    expect(created.FpoId).toEqual('fpoId')
    expect(created.CustomerApiKeyId).toMatch(/^HUB[A-Z0-9]{17}$/)
    expect(created.Secret).toMatch(/^[\w\d+/=]+:[\w\d+/=]+$/)
    expect(created.Enabled).toEqual(true)
    expect(decrypted.Secret).toMatch(/^[\w\d+/=]+$/)
    expect(created.Description).toMatch(/^Autogenerated on \d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z$/)
    expect(created.ApiGatewayId).toEqual('apiGatewayId')
    expect(created.UsagePlanId).toEqual('usagePlanId')
    expect(created.Saved).toEqual(true)

    expect(dynamodbClient.send).toHaveBeenCalledTimes(1)
    expect(apigatewayClient.send).toHaveBeenCalledTimes(2)
  })
})
